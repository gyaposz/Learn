0. XML configuration always overrides Annotations

-----------------------------------------------
1. Bean definition:

<bean	class			- required
	id			- unique | not required | 1 - beanPostProcessor esetén nem kell
	name			- not unique, but spring complains if collides | not required | multiple, but not used
	scope			- singleton csak egy, ez a default|prototype mindig új|session|request|global|custom
	factory-method		- Amivel az objektumokat gyártjuk (akár saját class-szal (static), akár factory-bean-nel (instance))
	factory-bean		- melyik bean-nel gyártjuk oket?
	init-method		- custom init-method (@see lifecycle)
	depends-on		- Végső kétségbeesésben. Nagyon kerülendő!
	lazy-initialization	- Sokat nem ér
	autowire		- byType, byName
	autowire-candidate	- enable/disable a bean to be candidate, default is on
	primary			- autowire esetén az elsődleges candidate
	abstract		- nem instaciálható
	parent			- ősbean (mindig a gyerekből olvassa: depends-on, autowire, dependency check, singleton, scope, lazy init)

	<alias name= from=>	- better than multiple names

	<constructor-arg sorrendben, ha nem indexet használunk
	type			- class
	value			- ez lesz konvertálva a type-ra. (@see PropertyEditor, Converter)
	index			- type helyett is lehet, ha nem adunk sorrendben.
	idref			- direct value of a bean
	ref			- bean reference

	<property
	ref			- bean reference, collection reference
	name			- name of the property (setter needed) compound property name - carefully (must not be null), useful when overriding parent definition
	<list, stb.>		- can be nested under property

	<bean			- nested beans, akkor célszerű, ha csak a parent bean éri el. nem kell ilyenkor id (más úgyse éri el)
	
        <lookup-method 		- name="getSentDate" metódus lefuttatása esetén inkább ezt csinálja helyette: bean="currentDate" />

-----------------------------------------------
2. context usage:

<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="location" value="/WEB-INF/datasource.properties" />
</bean>

it is the same as

<context:property-placeholder location="/WEB-INF/datasource.properties" /> - property file behúzása

<context:property-placeholder location="classpath:com/foo/jdbc.properties" />
<context:annotation-config /> a leggyakoribb beanPostProcessorokat beregisztrálja:
	AutowiredAnnotationBeanPostProcessor
	CommonAnnotationBeanPostProcessor
	PersistenceAnnotationBeanPostProcessor
	RequiredAnnotationBeanPostProcessor
<context:component-scan base-package="..." /> keresi az annotációkat

-----------------------------------------------
3. importing xml:

<beans>
	<import resource="xxx.xml">
</beans>

-----------------------------------------------
4. collections:

Ha property-nek adom át, nem feltétlenül kell megegyeznie a típusnak a class-ban és a property-nél (list-set, set-list)
Viszont vigyázat!!!
a springben a set az "egyediséget" bean definíció alapján tekinti, nem pl.: scope="prototype, stb. alapján.

<list/>
	<value>
	<ref bean=>
<set/>
	<value>
	<ref bean=>
<map/>
	<entry key= value=
	<entry key= value-ref=
<props/>
	<prop key="">value</prop>

<props merge="true">	- gyerekben örökölt property esetén a parent elemeit is átveszi

Önálló collections, ref-fel hivatkozhatok rájuk property-n belül pl.

<util:list id=""/>
	<value>
	<ref bean=>
<util:set id=""/>
	<value>
	<ref bean=>
<util:map id="">
	<entry key= value=
	<entry key= value-ref=
<util:properties id="">
	<prop key=""></prop>

-----------------------------------------------
5. implementable interfaces and lifecycle:

BeanNameAware				|
BeanFactoryAware			| - Default BeanPostProcessor, try to avoid them!
ApplicationContextAware			|

BeanPostProcessors pre-initialization	| - From configuration
InitializingBean                        | - Default BeanPostProcessor (CommonAnnotationBeanPostProcessor)
custom init-method			| - From configuration
BeanPostProcessors post-initialization	| - From configuration

DisposableBean				| - Default BeanPostProcessor (CommonAnnotationBeanPostProcessor)
custom destroy-method			| - From configuration 

destroy nem lesz meghívva pl prototype-on. Még tesztelni kell, nem tudom hogyan működik.

-----------------------------------------------
6. null

<null/>

-----------------------------------------------
7. BeanFactory

BeanFactorynak az a BeanFactoryPostProcessor ami a
Beannek a BeanPostProcessor

BeanFactoryPostProcessor példák: CustomEditorConfigurer, PropertyPlaceholderConfigurer, PropertyOverrideConfigurer

directly under placeholderconfigurer, in order to add system property as fallback:
<property name="properties">
	<value>custom.strategy=foo.strategy</value>
</property>

-----------------------------------------------
8. BeanPostProcessor

implements BeanPostProcessor
Önmaga is bean

<context:annotation-config /> a leggyakoribb beanPostProcessorokat beregisztrálja

-----------------------------------------------
9. PropertyEditor, Converter

extends PropertyEditorSupport	- String -> Object. setAsText, use setValue inside.
implements Converter<T, S>	- S -> T. convert, simply return
				- Be careful that ID is mandatory!

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="..." value="...PropertyEditor" />
			</map>
		</property>
	</bean>

	<bean id="conversionService"
		class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="...Converter" />
			</list>
		</property>
	</bean>

-----------------------------------------------
10. expression language

Próbáljuk meg elkerülni a nagyon bonyolult dolgokat. Helyette Factory-t kellene készíteni.

#{ }
#{ T(java.lang.Math).random()} - T, azaz típus
#{ bean.property }

-----------------------------------------------
11. p usage

<bean name="x" class="z">
	<property name="azonosito" value="érték">
	<property name="azi" ref="valaki">
</bean>

<bean name="x2" class="z">
	<p:azonosito="érték>
	<p:azi-ref=valaki>
</bean>

-----------------------------------------------
12. c usage

<bean name="x" class="z">
	<constructor-arg ref="bar">
	<constructor-arg ref="baz">
</bean>

<bean name="x" class="z" c:_0-ref="bar" c:_1-ref="baz">

-----------------------------------------------
13. util usage

<util:constant static-field="..."/> - constant behozatala
<util:property-path id="name" path="testBean.age"> - testBean bean age property-jére hivatkozunk.

-----------------------------------------------
14. autowire

Spring megpróbálja kitalálni, mit hova kell beszúrni.
Lehetőségek:
	- no
	- byName
	- byType - akkor használom a byName helyett pl, ha nem azonos az ID és a property neve
	- constructor - alapvetően típus alapján.
Ha ambigous, akkor köszi, ennyi volt, vége.

bytype és constructor esetén az autowire List vagy Set-es dependency-khez összegyűjti az összes elemet amelyik az elvárt típusú és mindet beteszi a collection-be.
bytype és constructor esetén az autowire Map-es dependency-khez összegyűjti az összes várt elemet amelyik elvárt típusú, és bean-név, bean pártként elhelyezi.
byname esetén autowire-elhetünk util:set, util:map vagy util:list-et.

-----------------------------------------------
15. running junit
//instead of AbstractJUnit4SpringContextTests you may use:
// @RunWith(SpringJUnit4ClassRunner)
@ContextConfiguration(locations="classpath:context-business.xml")
public class MailterTest extends AbstractJUnit4SpringContextTests {

Listener problems - read offending classes: may required javax.servlet, spring-web and junit 4.9+ (in case of spring 4.0+)

-----------------------------------------------
16. factoryBean

implements FactoryBean<Something>

<bean id="factory" class="factoryBean"> // this bean can generate Something.
<bean id="SomethingUser" class="SimpleBean"> // this bean only needs a type of something generated by factory.
	<property ref="something">
</bean>

Ugyanazt adja vissza vagy mindig masikat?

@Override
public boolean isSingleton() {
	return true;
}

-----------------------------------------------
17. Annotations

Cannot be used for BeanPostProcessors as they will process the annotations.

@Autowired
byType and byName as fallback
- on setters
- on constructor
- on private tags without setters
- or any methods

@Qualifier
finer grade control than primary
<qualifier> in xml to mark candidates
auto-wire in xml ignores <qualifier>

@Required
on setter methods to make them required dependency (if it is provided as constructor-arg, then spring will send failures).

Bean annotation:

@Resource      |
@PostConstruct | - from specification
@PreDestroy    |

@Component - singleton
@Component-ből származnak le: @Service, @Controller, @Repository

componenthez azonban kell a <context:component-scan base-package="...">, ez olyan, mintha context:annotation-config-om lenne.

@Scope - as scope in xml
@Qualifier - with autowired acts as a filter, without autowired acts as qualifier in xml
@Value - as value in xml
(@Bean, @Lazy only in javaConfig (@Configuration))

@Inject replacing @Autowired
@Named replacing partially @Component/@Qualifier